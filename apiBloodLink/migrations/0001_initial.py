# Generated by Django 5.2.7 on 2025-10-28 12:55

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BloodBag',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('blood_group', models.CharField(choices=[('A', 'A'), ('B', 'B'), ('AB', 'AB'), ('O', 'O')])),
                ('rhesus', models.CharField(choices=[('POS', '+'), ('NEG', '-')])),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('doctor', 'Doctor'), ('provider', 'Provider'), ('bank', 'Blood Bank')], max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='BloodBank',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=127)),
                ('password', models.CharField(max_length=255)),
                ('location', models.CharField(max_length=255)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='bloodbank_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('PENDING', 'En attente'), ('SENT', 'Envoyée'), ('RECEIVED', 'Reçue'), ('IN_PROGRESS', 'En cours de traitement'), ('RESOLVED', 'Résolue'), ('CANCELLED', 'Annulée'), ('FAILED', 'Échouée')], default='PENDING', max_length=20)),
                ('created_date', models.DateField(auto_now_add=True)),
                ('Resolved_date', models.DateField(blank=True, null=True)),
                ('blood_groupe', models.CharField(choices=[('A', 'A'), ('B', 'B'), ('AB', 'AB'), ('O', 'O')])),
                ('rhesus', models.CharField(choices=[('POS', '+'), ('NEG', '-')])),
                ('bank', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='emitted_alerts', to='apiBloodLink.bloodbank')),
            ],
        ),
        migrations.CreateModel(
            name='BloodTransaction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('bank', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='apiBloodLink.bloodbank')),
                ('blood_bag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='apiBloodLink.bloodbag')),
            ],
        ),
        migrations.AddField(
            model_name='bloodbank',
            name='blood_bags',
            field=models.ManyToManyField(related_name='banks', through='apiBloodLink.BloodTransaction', to='apiBloodLink.bloodbag'),
        ),
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('grade', models.CharField(choices=[('INT', 'Interne'), ('RES', 'Résident'), ('ASS', 'Assistant médical'), ('SPC', 'Spécialiste'), ('CHS', 'Chef de service'), ('PRF', 'Professeur')], default='INT', max_length=4)),
                ('speciality', models.CharField(choices=[('GP', 'Généraliste'), ('CD', 'Cardiologue'), ('NE', 'Neurologue'), ('OR', 'Orthopédiste'), ('PD', 'Pédiatre')], default='GP', max_length=2)),
                ('blood_bank', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='linked', to='apiBloodLink.bloodbank')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='doctor_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='BloodRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('date_request', models.DateTimeField(auto_now_add=True)),
                ('blood_group', models.CharField(choices=[('A', 'A'), ('B', 'B'), ('AB', 'AB'), ('O', 'O')])),
                ('rhesus', models.CharField(choices=[('POS', '+'), ('NEG', '-')])),
                ('quantity', models.PositiveIntegerField()),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('approved', 'Approuvée'), ('rejected', 'Rejetée')], default='pending', max_length=8)),
                ('bank', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='blood_requests', to='apiBloodLink.bloodbank')),
                ('docteur', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blood_requests', to='apiBloodLink.doctor')),
            ],
        ),
        migrations.CreateModel(
            name='Provider',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('sexe', models.CharField(choices=[('M', 'Masculin'), ('F', 'Féminin')], default='M')),
                ('date_birth', models.DateField(blank=True, null=True)),
                ('email', models.EmailField(max_length=127, unique=True)),
                ('phone_number', models.CharField(max_length=15, unique=True)),
                ('blood_group', models.CharField(max_length=1)),
                ('rhesus', models.CharField(max_length=1)),
                ('last_give', models.DateField(blank=True, null=True)),
                ('historique_medical', models.FileField(blank=True, null=True, upload_to='medical_histories/')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='provider_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='bloodtransaction',
            name='provider',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='apiBloodLink.provider'),
        ),
        migrations.AddField(
            model_name='bloodbag',
            name='provider',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='belong_to', to='apiBloodLink.provider'),
        ),
        migrations.CreateModel(
            name='AlerteReceive',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('PENDING', 'En attente de réponse'), ('RESPONDED', 'Répondue'), ('COMPLETED', 'Terminée avec succès'), ('CANCELLED', 'Annulée')])),
                ('alert', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='apiBloodLink.alert')),
                ('provider', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='apiBloodLink.provider')),
            ],
            options={
                'unique_together': {('alert', 'provider')},
            },
        ),
    ]
